#!/usr/bin/env nu

def "connect monitor" [] {
    let monitors = ^xrandr | lines | find ' connected' | split column " " name . type | select name type

    let primary = $monitors | where type == primary | get 0.name
    let externals = $monitors | where type != primary

    if not ($externals | is-empty) {
        ^xrandr --output $primary --off --output ($externals | get 0.name) --auto
    } else {
        ^xrandr --auto
    }
}

def "bspc configure" [config: record] {
    bspc config border_width $config.border_width
    bspc config window_gap $config.window_gap
    bspc config top_padding $config.padding.top
    bspc config bottom_padding $config.padding.bottom
    bspc config left_padding $config.padding.left
    bspc config right_padding $config.padding.right
    if $config.monocle.single {
        bspc config single_monocle true
    }
    bspc config borderless_monocle ($config.monocle.borderless | into string)
    bspc config gapless_monocle ($config.monocle.gapless | into string)
    bspc config click_to_focus $config.focus.click
    if $config.focus.follow_pointer {
        bspc config focus_follows_pointer true
    }
    bspc config ignore_ewmh_focus ($config.focus.ignore_ewmh | into string)
    bspc config split_ratio ($config.split_ratio | into string)
    bspc config remove_disabled_monitors ($config.monitors.remove_disabled | into string)
    bspc config merge_overlapping_monitors ($config.monitors.merge_overlapping | into string)
    bspc config pointer_modifier ($config.pointers.modifier | into string)
    bspc config pointer_action1 $config.pointers.actions.0
    bspc config pointer_action2 $config.pointers.actions.1
    bspc config pointer_action3 $config.pointers.actions.2

    bspc config focused_border_color $config.color.border.focused
    bspc config active_border_color $config.color.border.active
    bspc config presel_feedback_color $config.color.presel_feedback
    bspc config normal_border_color $config.color.border.normal

    $config.windows.rules?.tile? | default [] | each {|name|
        bspc rule --add $name state=tiled focus=on follow=on manage=on
    }
    $config.windows.rules?.chat_clients? | default [] | each {|name|
        bspc rule --add $name desktop ($config.desktops | last) state=tiled focus=off follow=off manage=on
    }
    $config.windows.rules?.float? | default [] | each {|name|
        bspc rule --add $name state=floating focus=on follow=on manage=on rectangle=1600x900+160+90
    }

    bspc monitor --reset-desktops $config.desktops
}

let config_file = $env.CURRENT_FILE | path dirname | path join "config.nuon"
let config = if ($config_file | path exists) {
    open $config_file
} else {
    {}
}

$config.env? | load-env

bspc configure $config

connect monitor

feh --randomize /usr/share/backgrounds/* --bg-fill --no-fehbg

if not (pgrep picom | is-empty) {
    killall picom
}
picom --experimental-backends --daemon

bash -c "dunst -conf ~/.config/dunst/dunstrc &"

if not (pgrep sxhkd | is-empty) {
    killall sxhkd
}
bash -c $"sxhkd -c ($env.CURRENT_FILE | path dirname | path join 'sxhkdrc') ~/.config/sxhkd/sxhkdrc &"
