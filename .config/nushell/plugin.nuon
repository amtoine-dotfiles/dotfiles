[[binary, sig, examples]; [nu_plugin_gstat, {name: gstat, usage: "Get the git status of a repo", extra_usage: "", search_terms: [], required_positional: [], optional_positional: [[name, desc, shape, var_id, default_value]; [path, "path to repo", Filepath, null, null]], rest_positional: null, vectorizes_over_list: false, named: [[long, short, arg, required, desc, var_id, default_value]; [help, h, null, false, "Display the help message for this command", null, null]], input_type: Any, output_type: Any, input_output_types: [], allow_variants_without_examples: false, is_filter: false, creates_scope: false, allows_unknown_args: false, category: {Custom: prompt}}, []], [nu_plugin_len, {name: len, usage: "Give the length of the input string", extra_usage: "", search_terms: [], required_positional: [], optional_positional: [], rest_positional: null, vectorizes_over_list: false, named: [[long, short, arg, required, desc, var_id, default_value]; [help, h, null, false, "Display the help message for this command", null, null]], input_type: Any, output_type: Any, input_output_types: [[String, Int]], allow_variants_without_examples: true, is_filter: false, creates_scope: false, allows_unknown_args: false, category: Experimental}, []], [nu_plugin_query, {name: query, usage: "Show all the query commands", extra_usage: "", search_terms: [], required_positional: [], optional_positional: [], rest_positional: null, vectorizes_over_list: false, named: [[long, short, arg, required, desc, var_id, default_value]; [help, h, null, false, "Display the help message for this command", null, null]], input_type: Any, output_type: Any, input_output_types: [], allow_variants_without_examples: false, is_filter: false, creates_scope: false, allows_unknown_args: false, category: Filters}, []], [nu_plugin_query, {name: "query json", usage: "execute json query on json file (open --raw <file> | query json 'query string')", extra_usage: "", search_terms: [], required_positional: [[name, desc, shape, var_id, default_value]; [query, "json query", String, null, null]], optional_positional: [], rest_positional: null, vectorizes_over_list: false, named: [[long, short, arg, required, desc, var_id, default_value]; [help, h, null, false, "Display the help message for this command", null, null]], input_type: Any, output_type: Any, input_output_types: [], allow_variants_without_examples: false, is_filter: false, creates_scope: false, allows_unknown_args: false, category: Filters}, []], [nu_plugin_query, {name: "query web", usage: "execute selector query on html/web", extra_usage: "", search_terms: [], required_positional: [], optional_positional: [], rest_positional: null, vectorizes_over_list: false, named: [[long, short, arg, required, desc, var_id, default_value]; [help, h, null, false, "Display the help message for this command", null, null], [query, q, String, false, "selector query", null, null], [as-html, m, null, false, "return the query output as html", null, null], [attribute, a, String, false, "downselect based on the given attribute", null, null], [as-table, t, Table, false, "find table based on column header list", null, null], [inspect, i, null, false, "run in inspect mode to provide more information for determining column headers", null, null]], input_type: Any, output_type: Any, input_output_types: [], allow_variants_without_examples: false, is_filter: false, creates_scope: false, allows_unknown_args: false, category: Network}, [[example, description, result]; ["http get https://phoronix.com | query web -q 'header'", "Retrieve all <header> elements from phoronix.com website", null], ["http get https://en.wikipedia.org/wiki/List_of_cities_in_India_by_population
    | query web -t [Rank City 'Population(2011)[3]' 'Population(2001)' 'State or union territory']", "Retrieve a html table from Wikipedia and parse it into a nushell table using table headers as guides", null], ["http get https://www.nushell.sh | query web -q 'h2, h2 + p' | group 2 | each {rotate --ccw tagline description} | flatten", "Pass multiple css selectors to extract several elements within single query, group the query results together and rotate them to create a table", null], ["http get https://example.org | query web --query a --attribute href", "Retrieve a specific html attribute instead of the default text", null]]], [nu_plugin_query, {name: "query xml", usage: "execute xpath query on xml", extra_usage: "", search_terms: [], required_positional: [[name, desc, shape, var_id, default_value]; [query, "xpath query", String, null, null]], optional_positional: [], rest_positional: null, vectorizes_over_list: false, named: [[long, short, arg, required, desc, var_id, default_value]; [help, h, null, false, "Display the help message for this command", null, null]], input_type: Any, output_type: Any, input_output_types: [], allow_variants_without_examples: false, is_filter: false, creates_scope: false, allows_unknown_args: false, category: Filters}, []], [nu_plugin_regex, {name: regex, usage: "Parse input with a regular expression", extra_usage: "", search_terms: [], required_positional: [[name, desc, shape, var_id, default_value]; [pattern, "the regular expression to use", String, null, null]], optional_positional: [], rest_positional: null, vectorizes_over_list: false, named: [[long, short, arg, required, desc, var_id, default_value]; [help, h, null, false, "Display the help message for this command", null, null]], input_type: Any, output_type: Any, input_output_types: [[String, {Table: []}]], allow_variants_without_examples: true, is_filter: false, creates_scope: false, allows_unknown_args: false, category: Experimental}, [[example, description, result]; ["\"hello world\" | regex '(?P<first>\\w+) (?P<second>\\w+)'", "Parse a string with a regular expression", {List: {vals: [[Record]; [{cols: [input, capture_name, match, begin, end], vals: [{String: {val: "hello world", span: {start: 0, end: 0}}}, {String: {val: "capgrp0", span: {start: 0, end: 0}}}, {String: {val: "hello world", span: {start: 0, end: 0}}}, {Int: {val: 0, span: {start: 0, end: 0}}}, {Int: {val: 11, span: {start: 0, end: 0}}}], span: {start: 0, end: 0}}], [{cols: [input, capture_name, match, begin, end], vals: [{String: {val: "hello world", span: {start: 0, end: 0}}}, {String: {val: first, span: {start: 0, end: 0}}}, {String: {val: hello, span: {start: 0, end: 0}}}, {Int: {val: 0, span: {start: 0, end: 0}}}, {Int: {val: 5, span: {start: 0, end: 0}}}], span: {start: 0, end: 0}}], [{cols: [input, capture_name, match, begin, end], vals: [{String: {val: "hello world", span: {start: 0, end: 0}}}, {String: {val: second, span: {start: 0, end: 0}}}, {String: {val: world, span: {start: 0, end: 0}}}, {Int: {val: 6, span: {start: 0, end: 0}}}, {Int: {val: 11, span: {start: 0, end: 0}}}], span: {start: 0, end: 0}}]], span: {start: 0, end: 0}}}]]]]